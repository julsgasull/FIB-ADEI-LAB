df[sel,"Dropoff_latitude"]<-NA
# non-possible values are replaced by NA, missing value symbol in R
#We are deleting trips from outside New York. This means we are not using latitude bigger than 40.54 and smaller than 40.86
llout <-which((df$Dropoff_latitude < 40.54) | (df$Dropoff_latitude > 40.86))
iouts[llout]<-iouts[llout]+1
names(df)
jouts[9]<-length(llout)
llout
# Now that we have the outliers, we are setting them as NA
df[llout,"Dropoff_latitude"]<-NA
# Chunk 19
summary(df$Fare_amount)
df[which(df[,"Fare_amount"]<0),]
sel<-which(df$Fare_amount <= 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[12]<-length(sel)
sel
df[sel,"Fare_amount"]<-NA
# non-possible values are replaced by NA, missing value symbol in R
# Outlier detection
Boxplot(df$Fare_amount)
var_out<-calcQ(df$Fare_amount)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=60,col="blue",lwd=2)
# We decide to set outliers for fare amounts bigger than 60, because the majority of the values are concentrated between 0 and 60.
llout<-which(df$Fare_amount>60)
iouts[llout]<-iouts[llout]+1
jouts[12]<-length(llout)
df[llout,"Fare_amount"]<-NA
llout
# Chunk 20
summary(df$Extra)
#We execute table in order to see every different value in the sample
table(df$Extra)
#As it is a price related variable, negative values should be treated as errors, and the other values are the ones defined for this variable, so there are not outliers.
df[which(df[, "Extra"] < 0),]
sel<-which(df$Extra < 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[13]<-length(sel)
df[sel,"Extra"]<-NA
sel
# Chunk 21
summary(df$MTA_tax)
df[which(df[, "MTA_tax"] != 0.50),]
sel<-which(df$MTA_tax != 0.50)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[14]<-length(sel)
df[sel,"MTA_tax"]<-NA
sel
#If we execute a summary, we'll see that every value should be 0.5
summary(df$MTA_tax)
# Chunk 22
summary(df$improvement_surcharge)
table(df$improvement_surcharge)
#We know that this surcharge was leived in 2015, so we need to check if the 0 values correspond to trips before this year. That is what we are going to do.
df$yearGt2015[(df$lpep_pickup_datetime >= "2015-01-01 00:00:00") & (df$improvement_surcharge == 0.3)] = 1
df$yearGt2015[(df$lpep_pickup_datetime < "2015-01-01 00:00:00") | (df$improvement_surcharge != 0.3)] = 0
table(df$yearGt2015)
#We see that the 0 individuals are errors, so we proceed to set them has NA.
sel<-which(df$improvement_surcharge <= 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[18]<-length(sel)
df[sel,"improvement_surcharge"]<-NA
sel
# Chunk 23
summary(df$Ehail_fee)
# WE DON’T TAKE IT INTO ACCOUNT BECAUSE EVERY VALUE OF OUR SAMPLE IS NA.
summary(df$Tip_amount)
#We proceed to check if the 0 values are related with payment_type = "Credit card" and the passenger did not tip.
df$CashTips[(df$Tip_amount > 0) & (df$Payment_type == "Cash")] = 1
df$CashTips[(df$Payment_type == "Credit card")] = 0
table(df$CashTips)
#We see that we have correct data, so we proceed to the outlier detection.
# Outlier detection
Boxplot(df$Tip_amount)
var_out<-calcQ(df$Tip_amount)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=17,col="blue",lwd=2)
llout<-which(df$Tip_amount>17)
iouts[llout]<-iouts[llout]+1
names(df)
jouts[15]<-length(llout)
df[llout,"Tip_amount"]<-NA
llout
jouts
summary(df$Tolls_amount)
#We see that there are not negative values, so we do not have errors. We proceed now to the outlier detection.
Boxplot(df$Tolls_amount)
var_out<-calcQ(df$Tolls_amount)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
table(df$Tolls_amount)
llout<-which(df$Tolls_amount>0)
iouts[llout]<-iouts[llout]+1
names(df)
jouts[16]<-length(llout)
df[llout,"Tolls_amount"]<-NA
llout
jouts
summary(df$Total_amount)
# there are not "no charge", so they are also "errors"
# It is a quantitive variable  Non-possible values will be recoded to NA
sel<-which(df$Total_amount<0)
if (length(sel)>0) {
ierrs[sel]<-ierrs[sel]+1
jerrs[19]<-length(sel)
}
sel                 #### sel contains the rownames of the individuals with "0"
names(df)
sel                 #### sel contains the rownames of the individuals with "0"
#                        as  value for longitude
df[sel,"Total_amount"]<-NA    # non-possible values are replaced by NA, missing value symbol in R
#We proceed to check if total amount is correct summing the other variables:
df$Sum_total_amount = (df$Fare_amount + df$Extra + df$MTA_tax + df$improvement_surcharge + df$Tip_amount + df$Tolls_amount)
df$Sum_total_amount
df$Sum_total_amount = (df$Fare_amount + df$Extra + df$MTA_tax + df$improvement_surcharge + df$Tip_amount + df$Tolls_amount)
sel<-which(df$Total_amount != df$Sum_total_amount)
names(df)
if (length(sel)>0) {
ierrs[sel]<-ierrs[sel]+1
jerrs[19]<-length(sel)
}
sel
jerrs
sel<-which((df$Total_amount != df$Sum_total_amount) | (df$Total_amount<0))
sel
summary(df$Total_amount)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
#setwd("~/Documents/uni/FIB-ADEI-LAB/deliverable1")
setwd("C:/Users/Claudia Sánchez/Desktop/FIB/TARDOR 2020-2021/ADEI/DELIVERABLE1/FIB-ADEI-LAB/deliverable1")
# Load Required Packages
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("missMDA","chemometrics","mvoutlier","effects","FactoMineR","car", "factoextra","RColorBrewer","dplyr","ggmap","ggthemes","knitr")
missingPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(missingPackages)) install.packages(missingPackages)
lapply(requiredPackages, require, character.only = TRUE)
# Chunk 3
if(!is.null(dev.list())) dev.off()  # Clear plots
rm(list=ls())                       # Clean workspace
# green_tripdata_2016-01
#setwd("~/Documents/uni/FIB-ADEI-LAB/deliverable1")
#filepath<-"~/Documents/uni/FIB-ADEI-LAB/deliverable1"
setwd("C:/Users/Claudia Sánchez/Desktop/FIB/TARDOR 2020-2021/ADEI/DELIVERABLE1/FIB-ADEI-LAB/deliverable1")
filepath<-"C:/Users/Claudia Sánchez/Desktop/FIB/TARDOR 2020-2021/ADEI/DELIVERABLE1/FIB-ADEI-LAB/deliverable1"
df<-read.table(paste0(filepath,"/green_tripdata_2016-01.csv"),header=T, sep=",")
dim(df)       # Displays the sample size
names(df)     # Displays the names of the sample variables
summary(df)
# Select your 5000 register sample (random sample)
# Use birthday of 1 member of the group --> Júlia's one
set.seed(180998)
sam<-as.vector(sort(sample(1:nrow(df),5000)))
# Verification and storage of the sample
head(df)
df<-df[sam,]
summary(df)
save.image("Taxi5000_raw.RData")
# Chunk 4
# Function to calculate the different quartiles
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
# Function to count the NA values
countNA <- function(x) {
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i) }
#Function to count a specific number of appearences
countX <- function(x,X) {
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i) }
# Chunk 5
imis<-rep(0,nrow(df))  # rows - trips
jmis<-rep(0,2*ncol(df))  # columns - variables
mis1<-countNA(df)
imis<-mis1$mis_ind
mis1$mis_col # Number of missings for the current set of variables
iouts<-rep(0,nrow(df))  # rows - trips
jouts<-rep(0,2*ncol(df))  # columns - variables
ierrs<-rep(0,nrow(df))  # rows - trips
jerrs<-rep(0,2*ncol(df))  # columns - variables
# Chunk 6
summary(df)
names(df)
# Chunk 7
df$VendorID<-factor(df$VendorID,labels=c("Mobile","VeriFone"))
nlevels(df$VendorID)
levels(df$VendorID)<-paste0("f.Vendor-",levels(df$VendorID))
summary(df$VendorID)
barplot(summary(df$VendorID),main="VendorID Barplot",col = "DarkOrchid")
# With the "factor" command what we are doing is factorizing the variable we pass to it and the value that comes out with the "levels" is the total number of our 5000 observations that each type of VendorID has and as we can see all the factors have value and we have no NA (data missing)
# Chunk 8
summary(df$RateCodeID)
df$RateCodeID<-factor(df$RateCodeID)
barplot(summary(df$RateCodeID),main="RateCodeID Barplot",col = "DarkOrchid")
# We see that most samples are in RateCodeID = 1, which is what we are interested in. Therefore, we factorize and create only two groups, the one with RateCodeID = 1 and the rest.
df$f.Rate<-1  # rep(1,nrow(df))
ll<-which(df$RateCodeID != "1");length(ll)
df$f.Rate[ll]<-2
df$f.Rate<-factor(df$f.Rate,levels=1:2,labels=c("f.Rate-1","f.Rate-Other"))
barplot(summary(df$f.Rate),main="RateCodeID Barplot",col = "DarkOrchid")
# Now is more balanced.
# Chunk 9
summary(df$Store_and_fwd_flag)
df$Store_and_fwd_flag<-factor(df$Store_and_fwd_flag)
barplot(summary(df$Store_and_fwd_flag),main="Store_and_fwd_flag Barplot",col = "DarkOrchid")
# Chunk 10
df$Payment_type<-factor(df$Payment_type,labels=c("Credit card","Cash","No charge","Dispute"))
summary(df$Payment_type)
barplot(summary(df$Payment_type),main="Payment_type Barplot",col = "DarkOrchid")
# As we can see, there are few values with "No charge" or "Dispute" category, so we decided to categorize it into a new category ("No paid").
levels(df$Payment_type) <- c("Credit card","Cash","No paid","No paid")
summary(df$Payment_type)
barplot(summary(df$Payment_type),main="Payment_type Barplot",col = "DarkOrchid")
# Chunk 11
## We just keep the hours
df$pickup<-substr(strptime(df$lpep_pickup_datetime, "%Y-%m-%d %H:%M:%S"), 12, 13)
# Chunk 12
## We just keep the hours
df$dropoff<-substr(strptime(df$Lpep_dropoff_datetime, "%Y-%m-%d %H:%M:%S"), 12, 13)
# Chunk 13
summary(df$Passenger_count)
# We set the 0 as an error because it is not possible to have a trip without passengers
sel<-which(df$Passenger_count ==0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[10]<-length(sel)
sel
#### sel contains the rownames of the individuals with "0" as  value for passengers
df[sel,"Passenger_count"]<-NA
#We decided to create categorical for this variable so we categorize it.
df$Passenger_count<-factor(df$Passenger_count)
#We see the barplot in order to see the distribution of passenger per trip
barplot(table(df$Passenger_count),main="Passenger_count Barplot",col = "DarkOrchid")
# Chunk 14
summary(df$Trip_distance)
# We see on the summary that there are not NA values, so we proceed to the outlier and error detection.
# Outlier detection
# In order to evalute or data, we decide to set the maximum trip distance to 30, so we proceed to delete the outliers.
Boxplot(df$Trip_distance)
var_out<-calcQ(df$Trip_distance)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=30,col="blue",lwd=2)
llout<-which(df$Trip_distance>30)
iouts[llout]<-iouts[llout]+1
names(df)
jouts[11]<-length(llout)
# Error detection
# We decide that an incorrect trip distance is the one with 0 miles or less. In order to be aware of this error we store it at ierrs, and jerrs. ierrs stores the number of errors in a row, and jerrs stores the total amount of errors in a variable.
sel<-which(df$Trip_distance <= 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[11]<-length(sel)
sel
# Set NA values in order to remove errors and outliers from the dataset
setNA<-which((df$Trip_distance<=0) | (df$Trip_distance > 30))
df[setNA,"Trip_distance"]<-NA
# We are going to set a categorical variable for the Trip_distance range. We decided to create 3 levels: "Short_dist", "Medium_dist" and "Long_dist".
# Short_dist <= 2.5
# Medium_dist 2.5 < Trip_distance <= 5
# Long_dist > 5
df$Trip_distance_range[df$Trip_distance <= 2.5] = "Short_dist"
df$Trip_distance_range[(df$Trip_distance > 2.5) & (df$Trip_distance <= 5)] = "Medium_dist"
df$Trip_distance_range[df$Trip_distance > 5] = "Long_dist"
summary(df$Trip_distance_range)
# We that it is not a factor yet, so we factor it.
df$Trip_distance_range <- factor(df$Trip_distance_range)
# We see a barplot for the factor we created.
barplot(table(df$Trip_distance_range),main="Trip_distance_range Barplot",col = "DarkOrchid")
# Chunk 15
summary(df$Pickup_longitude)
# 0.00 looks to be an error
# Seeing the individuals with this "0" value:
df[which(df[,"Pickup_longitude"]==0),]
# It is a quantitive variable.  Non-possible values will be recoded as errors, so will be transformed to NA.
sel<-which(df$Pickup_longitude == 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[6]<-length(sel)
sel
#### sel contains the rownames of the individuals with "0" as value for longitude
df[sel,"Pickup_longitude"]<-NA   # non-possible values are replaced by NA, missing value symbol in R
##### Which trips are not running in New-York?
# Consider if, at least, one of the pick-up and drop-off points belong to New-York area. If not, this trip is an "out-of-scope" individual and has to be eliminated of the basis. Nevertheless, you have to justify this elimination and count how many individuals were in this situation
# Look at that!! Possibly, starting from the outliers... "0" is missing value, outliers can help to detect trips running outside of New York...
#We are deleting trips from outside New York. This means we are not using longitudes bigger than -73.80 and smaller than -74.02
llout <-which((df$Pickup_longitude < -74.02) | (df$Pickup_longitude > -73.80))
iouts[llout]<-iouts[llout]+1
names(df)
jouts[6]<-length(llout)
# Now that we have the outliers, we are setting them as NA
df[llout,"Pickup_longitude"]<-NA
# Chunk 16
summary(df$Pickup_latitude)
# 0.00 looks to be an error
# Seeing the individuals with this "0" value:
df[which(df[,"Pickup_latitude"]==0),]
# It is a quantitive variable.  Non-possible values will be recoded as errors, so will be transformed to NA.
sel<-which(df$Pickup_latitude ==0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[7]<-length(sel)
sel
#### sel contains the rownames of the individuals with "0" as  value for latitude
df[sel,"Pickup_latitude"]<-NA
# non-possible values are replaced by NA, missing value symbol in R
#We are deleting trips from outside New York. This means we are not using latitudes bigger than 40.54 and smaller than 40.86
llout <-which((df$Pickup_latitude < 40.54) | (df$Pickup_latitude > 40.86))
iouts[llout]<-iouts[llout]+1
names(df)
jouts[7]<-length(llout)
# Now that we have the outliers, we are setting them as NA
df[llout,"Pickup_latitude"]<-NA
# Chunk 17
summary(df$Dropoff_longitude)
# 0.00 looks to be an error
# Seeing the individuals with this "0" value:
df[which(df[,"Dropoff_longitude"]== 0),]
# It is a quantitive variable.  Non-possible values will be recoded as errors, so will be transformed to NA.
sel<-which(df$Dropoff_longitude == 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[8]<-length(sel)
sel
#### sel contains the rownames of the individuals with "0" as  value for longitude
df[sel,"Dropoff_longitude"]<-NA
# non-possible values are replaced by NA, missing value symbol in R
#We are deleting trips from outside New York. This means we are not using longitudes bigger than -73.80 and smaller than -74.02
llout <-which((df$Dropoff_longitude < -74.02) | (df$Dropoff_longitude > -73.80))
iouts[llout]<-iouts[llout]+1
names(df)
jouts[8]<-length(llout)
llout
# Now that we have the outliers, we are setting them as NA
df[llout,"Dropoff_longitude"]<-NA
# Chunk 18
summary(df$Dropoff_latitude)
# 0.00 looks to be an error
# Seeing the individuals with this "0" value:
df[which(df[,"Dropoff_latitude"]== 0),]
sel<-which(df$Dropoff_latitude == 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[9]<-length(sel)
sel
#### sel contains the rownames of the individuals with "0" as  value for latitude
df[sel,"Dropoff_latitude"]<-NA
# non-possible values are replaced by NA, missing value symbol in R
#We are deleting trips from outside New York. This means we are not using latitude bigger than 40.54 and smaller than 40.86
llout <-which((df$Dropoff_latitude < 40.54) | (df$Dropoff_latitude > 40.86))
iouts[llout]<-iouts[llout]+1
names(df)
jouts[9]<-length(llout)
llout
# Now that we have the outliers, we are setting them as NA
df[llout,"Dropoff_latitude"]<-NA
# Chunk 19
summary(df$Fare_amount)
df[which(df[,"Fare_amount"]<0),]
sel<-which(df$Fare_amount <= 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[12]<-length(sel)
sel
df[sel,"Fare_amount"]<-NA
# non-possible values are replaced by NA, missing value symbol in R
# Outlier detection
Boxplot(df$Fare_amount)
var_out<-calcQ(df$Fare_amount)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=60,col="blue",lwd=2)
# We decide to set outliers for fare amounts bigger than 60, because the majority of the values are concentrated between 0 and 60.
llout<-which(df$Fare_amount>60)
iouts[llout]<-iouts[llout]+1
jouts[12]<-length(llout)
df[llout,"Fare_amount"]<-NA
llout
# Chunk 20
summary(df$Extra)
#We execute table in order to see every different value in the sample
table(df$Extra)
#As it is a price related variable, negative values should be treated as errors, and the other values are the ones defined for this variable, so there are not outliers.
df[which(df[, "Extra"] < 0),]
sel<-which(df$Extra < 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[13]<-length(sel)
df[sel,"Extra"]<-NA
sel
# Chunk 21
summary(df$MTA_tax)
df[which(df[, "MTA_tax"] != 0.50),]
sel<-which(df$MTA_tax != 0.50)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[14]<-length(sel)
df[sel,"MTA_tax"]<-NA
sel
#If we execute a summary, we'll see that every value should be 0.5
summary(df$MTA_tax)
# Chunk 22
summary(df$improvement_surcharge)
table(df$improvement_surcharge)
#We know that this surcharge was leived in 2015, so we need to check if the 0 values correspond to trips before this year. That is what we are going to do.
df$yearGt2015[(df$lpep_pickup_datetime >= "2015-01-01 00:00:00") & (df$improvement_surcharge == 0.3)] = 1
df$yearGt2015[(df$lpep_pickup_datetime < "2015-01-01 00:00:00") | (df$improvement_surcharge != 0.3)] = 0
table(df$yearGt2015)
#We see that the 0 individuals are errors, so we proceed to set them has NA.
sel<-which(df$improvement_surcharge <= 0)
ierrs[sel]<-ierrs[sel]+1
names(df)
jerrs[18]<-length(sel)
df[sel,"improvement_surcharge"]<-NA
sel
# Chunk 23
summary(df$Ehail_fee)
# WE DON’T TAKE IT INTO ACCOUNT BECAUSE EVERY VALUE OF OUR SAMPLE IS NA.
# Chunk 24
summary(df$Tip_amount)
#We proceed to check if the 0 values are related with payment_type = "Credit card" and the passenger did not tip.
df$CashTips[(df$Tip_amount > 0) & (df$Payment_type == "Cash")] = 1
df$CashTips[(df$Payment_type == "Credit card")] = 0
table(df$CashTips)
#We see that we have correct data, so we proceed to the outlier detection.
# Outlier detection
Boxplot(df$Tip_amount)
var_out<-calcQ(df$Tip_amount)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=17,col="blue",lwd=2)
llout<-which(df$Tip_amount>17)
iouts[llout]<-iouts[llout]+1
names(df)
jouts[15]<-length(llout)
df[llout,"Tip_amount"]<-NA
llout
# Chunk 25
summary(df$Tolls_amount)
#We see that there are not negative values, so we do not have errors. We proceed now to the outlier detection.
Boxplot(df$Tolls_amount)
var_out<-calcQ(df$Tolls_amount)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
table(df$Tolls_amount)
#As we see in the boxplot and the table, the majority of the individuals are 0, so the values bigger than 0 will be outliers.
llout<-which(df$Tolls_amount>0)
iouts[llout]<-iouts[llout]+1
names(df)
jouts[16]<-length(llout)
df[llout,"Tolls_amount"]<-NA
llout
summary(df$Total_amount)
#We proceed to check if total amount is correct summing the other variables:
df$Sum_total_amount = (df$Fare_amount + df$Extra + df$MTA_tax + df$improvement_surcharge + df$Tip_amount + df$Tolls_amount)
sel<-which((df$Total_amount != df$Sum_total_amount) | (df$Total_amount<0))
names(df)
if (length(sel)>0) {
ierrs[sel]<-ierrs[sel]+1
jerrs[19]<-length(sel)
}
sel
# there are not "no charge", so they are also "errors"
# It is a quantitive variable  Non-possible values will be recoded to NA
sel<-which(df$Total_amount<0)
sel                 #### sel contains the rownames of the individuals with "0"
#We proceed to check if total amount is correct summing the other variables:
df$Sum_total_amount = (df$Fare_amount + df$Extra + df$MTA_tax + df$improvement_surcharge + df$Tip_amount + df$Tolls_amount)
sel<-which((df$Total_amount != df$Sum_total_amount) | (df$Total_amount<0))
names(df)
if (length(sel)>0) {
ierrs[sel]<-ierrs[sel]+1
jerrs[19]<-length(sel)
}
sel
df[sel,"Total_amount"]<-NA
jerrs
# Outlier detection
Boxplot(df$Total_amount)
var_out<-calcQ(df$Total_amount)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
abline(h=90,col="blue",lwd=2)
llout<-which(df$Total_amount>90)
iouts[llout]<-iouts[llout]+1
jouts[19]<-length(llout)
jouts
df[llout,"Total_amount"]<-NA
df$Trip_type<-factor(df$Trip_type,labels=c("Street-Hail","Dispatch"))
barplot(summary(df$Trip_type),main="Trip_type Barplot",col = "DarkOrchid")
levels(df$Trip_type)
summary(df$Trip_type)
